import re
from typing import List
from fastapi import APIRouter, UploadFile, HTTPException
from pydantic import BaseModel
import databutton as db
from pymongo import MongoClient
from PyPDF2 import PdfReader
from docx import Document as DocxDocument
import os
from datetime import datetime

router = APIRouter()

class QueryRequest(BaseModel):
    query: str

class QueryResponse(BaseModel):
    results: List[dict]

class DocumentResponse(BaseModel):
    id: str
    filename: str
    content: str
    upload_date: str

def get_mongodb_client():
    client = MongoClient(db.secrets.get("MONGODB_URI"))
    return client.document_db.documents

def sanitize_filename(filename: str) -> str:
    return re.sub(r'[^a-zA-Z0-9._-]', '', filename)

def extract_text_from_pdf(file_path: str) -> str:
    with open(file_path, 'rb') as file:
        pdf = PdfReader(file)
        text = ''
        for page in pdf.pages:
            text += page.extract_text() + '\n'
        return text

def extract_text_from_docx(file_path: str) -> str:
    doc = DocxDocument(file_path)
    return '\n'.join([paragraph.text for paragraph in doc.paragraphs])

@router.post("/upload")
async def upload_document(file: UploadFile):
    try:
        filename = sanitize_filename(file.filename)
        file_extension = os.path.splitext(filename)[1].lower()
        
        if file_extension not in ['.pdf', '.docx', '.doc']:
            raise HTTPException(status_code=400, detail="Unsupported file type")
        
        # Save file temporarily
        temp_path = f"/tmp/{filename}"
        with open(temp_path, "wb") as temp_file:
            content = await file.read()
            temp_file.write(content)
        
        # Extract text based on file type
        if file_extension == '.pdf':
            text_content = extract_text_from_pdf(temp_path)
        else:
            text_content = extract_text_from_docx(temp_path)
        
        # Store in MongoDB
        collection = get_mongodb_client()
        document = {
            "filename": filename,
            "content": text_content,
            "upload_date": datetime.now().isoformat(),
        }
        result = collection.insert_one(document)
        
        return {"message": "Document uploaded successfully", 
                "id": str(result.inserted_id),
                "filename": filename}
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        if os.path.exists(temp_path):
            os.remove(temp_path)

@router.get("/documents", response_model=List[DocumentResponse])
def get_documents():
    try:
        collection = get_mongodb_client()
        documents = collection.find()
        return [
            DocumentResponse(
                id=str(doc["_id"]),
                filename=doc["filename"],
                content=doc["content"],
                upload_date=doc["upload_date"]
            )
            for doc in documents
        ]
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/documents/{document_id}", response_model=DocumentResponse)
def get_document(document_id: str):
    try:
        from bson.objectid import ObjectId
        collection = get_mongodb_client()
        document = collection.find_one({"_id": ObjectId(document_id)})
        
        if not document:
            raise HTTPException(status_code=404, detail="Document not found")
        
        return DocumentResponse(
            id=str(document["_id"]),
            filename=document["filename"],
            content=document["content"],
            upload_date=document["upload_date"]
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/documents/{document_id}")
def delete_document(document_id: str):
    try:
        from bson.objectid import ObjectId
        collection = get_mongodb_client()
        result = collection.delete_one({"_id": ObjectId(document_id)})
        
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Document not found")
        
        return {"message": "Document deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search", response_model=QueryResponse)
def search_documents(request: QueryRequest):
    try:
        collection = get_mongodb_client()
        # Create text index if it doesn't exist
        collection.create_index([('content', 'text')])
        
        results = collection.find(
            {"$text": {"$search": request.query}},
            {"score": {"$meta": "textScore"}}
        ).sort([("score", {"$meta": "textScore"})]).limit(5)
        
        return QueryResponse(results=[
            {
                "id": str(doc["_id"]),
                "filename": doc["filename"],
                "content": doc["content"],
                "upload_date": doc["upload_date"]
            }
            for doc in results
        ])
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
