import { create } from 'zustand'

type Document = {
  id: string
  filename: string
  uploadDate?: string
  content?: string
  upload_date?: string
}

type Store = {
  selectedDocument: Document | null
  setSelectedDocument: (document: Document | null) => void
  documents: Document[]
  isLoading: boolean
  error: string | null
  setDocuments: (documents: Document[]) => void
  addDocument: (document: Document) => void
  removeDocument: (id: string) => void
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
}

export const useStore = create<Store>((set) => ({
  selectedDocument: null,
  setSelectedDocument: (document) => set(() => ({ selectedDocument: document })),
  documents: [],
  isLoading: false,
  error: null,
  setDocuments: (documents) => set(() => ({ documents })),
  addDocument: (document) =>
    set((state) => ({
      documents: [...state.documents, document],
      error: null,
    })),
  removeDocument: (id) =>
    set((state) => ({
      documents: state.documents.filter((doc) => doc.id !== id),
      error: null,
    })),
  setLoading: (loading) => set(() => ({ isLoading: loading })),
  setError: (error) => set(() => ({ error })), 
}))
