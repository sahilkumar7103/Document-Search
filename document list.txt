import React, { useEffect } from "react";
import { FileText, Trash2, Loader2, Eye } from "lucide-react";
import { useStore } from "../utils/store";
import brain from "brain";
import { toast } from "sonner";

type DocumentType = 'pdf' | 'word' | 'other';

const getDocumentIcon = (filename: string) => {
  const extension = filename.split('.').pop()?.toLowerCase();
  const iconClass = extension === 'pdf' ? 'text-red-500' : 
                    ['doc', 'docx'].includes(extension || '') ? 'text-blue-500' : 
                    'text-gray-500';
  
  return <FileText className={w-5 h-5 ${iconClass}} />;
};

export function DocumentList() {
  const { documents, setDocuments, removeDocument, setLoading, isLoading, setSelectedDocument } = useStore();

  useEffect(() => {
    const fetchDocuments = async () => {
      setLoading(true);
      try {
        const response = await brain.get_documents();
        const data = await response.json();
        const documents = data.map((doc: any) => ({
          id: doc.id,
          filename: doc.filename,
          uploadDate: doc.upload_date || new Date().toISOString()
        }));
        setDocuments(documents);
      } catch (error) {
        console.error('Fetch error:', error);
        toast.error("Failed to fetch documents");
      } finally {
        setLoading(false);
      }
    };

    fetchDocuments();
  }, []);

    const handlePreview = async (id: string) => {
    setLoading(true);
    try {
      const response = await brain.get_document({ document_id: id });
      if (!response.ok) {
        throw new Error(Failed to fetch document: ${response.statusText});
      }
      const document = await response.json();
      setSelectedDocument(document);
    } catch (error) {
      console.error('Preview error:', error);
      toast.error("Failed to load document preview");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string, filename: string) => {
    // Custom confirmation dialog
    const confirmed = window.confirm(Are you sure you want to delete "${filename}"? This action cannot be undone.);
    if (!confirmed) return;
    
    setLoading(true);
    try {
      const response = await brain.delete_document({ document_id: id });
      if (!response.ok) {
        throw new Error(Failed to delete document: ${response.statusText});
      }
      removeDocument(id);
      toast.success("${filename}" deleted successfully);
    } catch (error) {
      console.error('Delete error:', error);
      toast.error("Failed to delete document. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  if (isLoading && documents.length === 0) {
    return (
      <div className="mt-8 flex flex-col items-center justify-center p-8 bg-white rounded-xl shadow-sm">
        <Loader2 className="w-8 h-8 text-blue-500 animate-spin mb-4" />
        <p className="text-gray-600">Loading documents...</p>
      </div>
    );
  }

  if (!isLoading && documents.length === 0) {
    return (
      <div className="mt-8 flex flex-col items-center justify-center p-8 bg-white rounded-xl shadow-sm border-2 border-dashed border-gray-200">
        <FileText className="w-12 h-12 text-gray-400 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-1">No documents yet</h3>
        <p className="text-gray-600 text-center">Upload your first document to get started</p>
      </div>
    );
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString(undefined, {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  return (
    <div className="mt-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-lg font-semibold text-gray-900">Uploaded Documents</h2>
        <span className="text-sm text-gray-600">{documents.length} document{documents.length !== 1 ? 's' : ''}</span>
      </div>

      <div className="grid gap-4 sm:grid-cols-2">
        {documents.map((doc) => (
          <div
            key={doc.id}
            className="group relative flex flex-col bg-white p-4 rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-shadow"
          >
            <div className="flex items-start justify-between mb-2">
              <button
                onClick={() => handlePreview(doc.id)}
                className="flex items-start gap-3 min-w-0 hover:text-blue-600 transition-colors"
                title="Preview document"
              >
                {getDocumentIcon(doc.filename)}
                <div className="min-w-0">
                  <h3 className="font-medium text-gray-900 truncate">{doc.filename}</h3>
                  <p className="text-sm text-gray-500">
                    Uploaded {formatDate(doc.uploadDate)}
                  </p>
                </div>
              </button>

              <div className="flex gap-2">
                <button
                  onClick={() => handlePreview(doc.id)}
                  className="p-2 text-gray-400 hover:text-blue-500 transition-colors opacity-0 group-hover:opacity-100"
                  title={Preview ${doc.filename}}
                  disabled={isLoading}
                >
                  <Eye className="w-5 h-5" />
                </button>
                <button
                  onClick={() => handleDelete(doc.id, doc.filename)}
                  className="p-2 text-gray-400 hover:text-red-500 transition-colors opacity-0 group-hover:opacity-100"
                  title={Delete ${doc.filename}}
                  disabled={isLoading}
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {isLoading && (
        <div className="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg p-3 flex items-center gap-2">
          <Loader2 className="w-4 h-4 text-blue-500 animate-spin" />
          <span className="text-sm text-gray-600">Updating...</span>
        </div>
      )}
    </div>
  );
}